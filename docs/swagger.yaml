basePath: /api/v1
definitions:
  models.BatchUnitURLRequest:
    properties:
      correlation_id:
        type: string
      original_url:
        type: string
      user_id:
        type: string
    type: object
  models.BatchUnitURLResponse:
    properties:
      correlation_id:
        type: string
      short_url:
        type: string
    type: object
  models.ShortenURLRequest:
    properties:
      url:
        type: string
    type: object
  models.ShortenURLResponse:
    properties:
      result:
        type: string
    type: object
  models.UserURLResponse:
    properties:
      original_url:
        type: string
      short_url:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A URL shortening service API
  title: URL Shortener API
  version: "1.0"
paths:
  /{id}:
    get:
      consumes:
      - text/plain
      description: Retrieves and redirects to the original URL from a shortened URL
        ID
      parameters:
      - description: Shortened URL ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "307":
          description: Temporary Redirect
          headers:
            Location:
              description: Original URL for redirect
              type: string
          schema:
            type: string
        "400":
          description: URL not found!
          schema:
            type: string
        "410":
          description: URL was deleted!
          schema:
            type: string
      summary: Get original URL
      tags:
      - urls
  /api/shorten:
    post:
      consumes:
      - application/json
      description: Creates a shortened version of a URL provided in JSON format
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: URL to shorten
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ShortenURLRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Shortened URL
          schema:
            $ref: '#/definitions/models.ShortenURLResponse'
        "409":
          description: URL already exists
          schema:
            $ref: '#/definitions/models.ShortenURLResponse'
      security:
      - Bearer: []
      summary: Shorten URL via JSON
      tags:
      - urls
  /api/shorten/batch:
    post:
      consumes:
      - application/json
      description: Creates shortened versions for multiple URLs in a single request
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Array of URLs to shorten
        in: body
        name: request
        required: true
        schema:
          items:
            $ref: '#/definitions/models.BatchUnitURLRequest'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Array of shortened URLs
          schema:
            items:
              $ref: '#/definitions/models.BatchUnitURLResponse'
            type: array
        "400":
          description: Error reading body!/Error unmarshalling body!/Empty or malformed
            body sent!/Error saving URLs!
          schema:
            type: string
      security:
      - Bearer: []
      summary: Shorten multiple URLs in batch
      tags:
      - urls
  /api/url:
    post:
      consumes:
      - text/plain
      description: Creates a shortened version of a provided URL
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Original URL to shorten
        in: body
        name: url
        required: true
        schema:
          type: string
      produces:
      - text/plain
      responses:
        "201":
          description: Shortened URL
          schema:
            type: string
        "400":
          description: Can't read body!/Empty body!/Malformed URI!/Couldn't encode
            URL!
          schema:
            type: string
        "409":
          description: URL already exists
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create shortened URL
      tags:
      - urls
  /api/urls:
    delete:
      consumes:
      - application/json
      description: Delete multiple URLs for a specific user
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Array of URLs to delete
        in: body
        name: request
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - text/plain
      responses:
        "202":
          description: Accepted
          schema:
            type: string
        "400":
          description: Error reading body!/Error unmarshalling body!/Empty or malformed
            body sent!
          schema:
            type: string
      summary: Delete URLs
      tags:
      - urls
  /api/user/urls:
    get:
      consumes:
      - application/json
      description: Retrieves all URLs associated with the authenticated user
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user's URLs
          schema:
            items:
              $ref: '#/definitions/models.UserURLResponse'
            type: array
        "204":
          description: No URLs found!
          schema:
            type: string
        "400":
          description: Error finding URLs!
          schema:
            type: string
      summary: Get user's URLs
      tags:
      - urls
  /ping:
    get:
      consumes:
      - text/plain
      description: Check if database connection is alive
      produces:
      - text/plain
      responses:
        "200":
          description: Live
          schema:
            type: string
        "500":
          description: Can't connect to the Database!
          schema:
            type: string
      summary: Ping database
      tags:
      - health
swagger: "2.0"
